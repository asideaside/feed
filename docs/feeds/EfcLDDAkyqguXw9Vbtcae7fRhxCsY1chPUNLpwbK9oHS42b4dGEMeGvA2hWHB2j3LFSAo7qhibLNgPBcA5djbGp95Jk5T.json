{"id":"EfcLDDAkyqguXw9Vbtcae7fRhxCsY1chPUNLpwbK9oHS42b4dGEMeGvA2hWHB2j3LFSAo7qhibLNgPBcA5djbGp95Jk5T","title":"top scoring links : programming","displayTitle":"Reddit - Programming","url":"https://www.reddit.com/r/programming/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/programming/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Is the Point Inside the Triangle?","url":"https://alexsyniakov.com/2025/03/22/is-the-point-inside-the-triangle/","date":1742672394,"author":"/u/innochenti","guid":600,"unread":true,"content":"<p>Today we’re tackling something that seems simple: how do you tell if a point is inside a triangle? I’ve got five things I want to do here:</p><p>This post will be long, with some detours and extra thoughts. But I think that’s the best way to get tricky stuff. A story keeps it interesting and helps you remember the important bits. So, this won’t just be words – it’ll be a journey with logic and aha moments.</p><p><strong>Explain the basics simply</strong></p><p>We’ll look at the building blocks and steps to figure out if a point’s in a triangle. Lots of people write about this, but I think they miss stuff or make it too quick. I’ll do it my way.</p><p>I’ll stick to the ideas that help solve this one question.</p><p>Even something small like this takes more understanding than you’d guess. I want to show that.</p><p>This is from a book I’m writing. I’m testing if it works for readers.</p><p>Just as the world is made up of atoms and molecules, at the heart of any 3D program lies the triangle. So, let’s begin our story with the triangle and explore why it’s so crucial for 3D graphics. </p><p>Let’s turn to the definition from Wikipedia:<em>A triangle is a figure consisting of three line segments, each of whose endpoints are connected. This forms a polygon with three sides and three angles.</em></p><p>Sounds terribly boring, doesn’t it? But don’t let that fool you – triangles are amazing. They’re behind your favorite 3D editor, video game, or big movie. Everything 3D on your screen? It’s all triangles doing the heavy lifting, turned into pixels in the end (they call that rasterization). </p><p>Here’s a heads-up: I might bend some geometry rules a bit. Serious math folks could get mad, but I think you can explain tricky stuff in a way that clicks faster than slogging through years of math classes.</p><p><em>So, let’s begin! We have the concept of a triangle: three points connected by three lines. Now, let’s break our molecule down into atoms.</em></p><h3>Digression 1: Why the Triangle?</h3><p>Time for a quick side trip (and there’ll be more, trust me) about why triangles are the go-to for 3D graphics, instead of something like a point or a circle.</p><p><strong>Triangles can fake any shape</strong>Even a circle! Pile up enough triangles, and you can make it look close enough to trick the eye.</p><p>So, why not pick something else? Your screen’s just a bunch of pixels – tiny dots. Smooth shapes like circles don’t fit that world easily. You’ve got to fake them with something chunkier, like triangles.</p><p><strong>Triangles are old friends</strong></p><p>The properties of triangles have been well understood since the days of Pythagoras, making them a reliable and mathematically solid choice.</p><p>Triangles make it easy to figure out things like light, shadows, and textures in graphics, way better than trickier shapes.</p><p>All the modern graphics gear is built to handle triangles fast and smooth.</p><p><em>Side trip done – let’s get back to the atoms of our triangle, the points!</em></p><p>A point marks a spot in space, plain and simple. It doesn’t have width, length, or thickness. But when we put it on paper, we make it a big dot anyway.</p><p>What can we do with points? In other words, what operations can we perform on points?</p><p>You can technically add their parts x, y, z. But does it make sense? Not at all. So, adding points doesn’t really do much.</p><p>Can we subtract points? Yes, and it gives us something new – a . You just take one point’s coordinates and subtract the other’s. Say you’ve got two points in 3D,  and . Subtract them, and you get a vector .</p><p>Let’s take a quick look at vectors before we get back to . A might seem like a at first – same numbers – but it’s not. It’s about and . Take two points,  and . Subtract  – , and you get a vector, , that shows the way from  to . And if you measure that vector’s size – its magnitude, , you’ll get the distance between  and .</p><p>If we draw the vector  on a coordinate system, starting at <img src=\"https://s0.wp.com/latex.php?latex=%280%2C+0%2C+0%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%280%2C+0%2C+0%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%280%2C+0%2C+0%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"(0, 0, 0) \"> and going to <img src=\"https://s0.wp.com/latex.php?latex=%28V_x%2C+V_y%2C+V_z%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%28V_x%2C+V_y%2C+V_z%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28V_x%2C+V_y%2C+V_z%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"(V_x, V_y, V_z) \">, we get a line that shows its direction.</p><p>Now, take point  and add vector  to it. What do you get? Point ! So, <img src=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BB%7D+%3D+%5Cmathbf%7BA%7D+%2B+%5Cvec%7BV%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BB%7D+%3D+%5Cmathbf%7BA%7D+%2B+%5Cvec%7BV%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbf%7BB%7D+%3D+%5Cmathbf%7BA%7D+%2B+%5Cvec%7BV%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\mathbf{B} = \\mathbf{A} + \\vec{V} \"> it’s like the vector moves you from  to .</p><p>If we take point  and subtract vector  from it, we end up back at point . So, <img src=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BA%7D+%3D+%5Cmathbf%7BB%7D+-+%5Cvec%7BV%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BA%7D+%3D+%5Cmathbf%7BB%7D+-+%5Cvec%7BV%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbf%7BA%7D+%3D+%5Cmathbf%7BB%7D+-+%5Cvec%7BV%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\mathbf{A} = \\mathbf{B} - \\vec{V} \"> That’s how you can shift a point using a vector.</p><p>Now, if you flip the vector’s sign – make it negative – you get the same , just pointing the other way. For example, <img src=\"https://s0.wp.com/latex.php?latex=%5Coverline%7B%5Cmathbf%7BV%7D%7D+%3D+%28V_x%2C+V_y%2C+V_z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Coverline%7B%5Cmathbf%7BV%7D%7D+%3D+%28V_x%2C+V_y%2C+V_z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Coverline%7B%5Cmathbf%7BV%7D%7D+%3D+%28V_x%2C+V_y%2C+V_z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\overline{\\mathbf{V}} = (V_x, V_y, V_z)\">  turns into <img src=\"https://s0.wp.com/latex.php?latex=-%5Coverline%7B%5Cmathbf%7BV%7D%7D+%3D+%28-V_x%2C+-V_y%2C+-V_z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=-%5Coverline%7B%5Cmathbf%7BV%7D%7D+%3D+%28-V_x%2C+-V_y%2C+-V_z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=-%5Coverline%7B%5Cmathbf%7BV%7D%7D+%3D+%28-V_x%2C+-V_y%2C+-V_z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"-\\overline{\\mathbf{V}} = (-V_x, -V_y, -V_z)\">.</p><p>So, what’s possible with ? We can them or them. No big shock – the result is always another vector. But how do we picture it?</p><p>To show the between two , think of it as adding one to the opposite of the other: <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+%2B+%28-%5Cvec%7B%5Cmathbf%7BV%7D%7D%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+%2B+%28-%5Cvec%7B%5Cmathbf%7BV%7D%7D%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+%2B+%28-%5Cvec%7B%5Cmathbf%7BV%7D%7D%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{U}} + (-\\vec{\\mathbf{V}}) \">. It’s still a parallelogram, just with <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{V}} \"> flipped around.</p><p>Start with vector <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{U}} \"> at the origin. Then take <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{V}} \">, reverse it to make <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7B-V%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7B-V%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7B-V%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{-V}} \">, and put it at the end of <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{U}} \">. Draw the parallelogram using <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{U}} \"> and <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7B-V%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7B-V%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7B-V%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{-V}} \"> as sides. The diagonal from the origin? That’s <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+-+%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+-+%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BU%7D%7D+-+%5Cvec%7B%5Cmathbf%7BV%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{U}} - \\vec{\\mathbf{V}} \">.</p><h3>A Simple Trick to Remember Operations Between Points and Vectors</h3><p>Want an easy way to handle points and vectors? Here’s a little trick: add a , w, to the usual x, y, z.</p><p>For a , it’s (x, y, z, 1) – the w is 1.For a , it’s (x, y, z, 0) – the w is 0.</p><p>With this, we can sort out all the operations between them. Let’s see how it works.</p><p><em>That fourth coordinate, w, has another big role – we’ll get to it later. For now, let’s just keep it in mind as something neat. Going forward, we’ll drop it to keep things simple.</em></p><h3>Digression 2: Point vs Vector classes</h3><p>In programming, we usually split things into two classes: and . But honestly, a lot of coders find that annoying. They’d rather treat a point like a – just another starting from the . That way, they can do all the math stuff, like adding or subtracting, without worrying about what’s a point and what’s a vector.</p><p>Say you’ve got two points,  and , and you want the angle between them from the . You could write it like this:</p><div><pre title=\"\">Point O(0, 0, 0);\nVector vA = A-O;\nVector vB = B-O;\ndouble angle = std::acos(dot(vA, vB) / (length(vA) * length(vB)));\n</pre></div><p>But if you just treat  and  as radius vectors, it gets shorter:</p><div><pre title=\"\">double angle = std::acos(dot(A, B) / (length(A) * length(B)));\n</pre></div><p>The second way is quicker to write, sure. Still, for us, making sense of things matters more than saving a line or two. Keeping and separate keeps it clear what’s what.</p><h3>Calculating Distance / Vector Length</h3><p>Let’s tackle the distance between two points again. Take <img src=\"https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A(x_1, y_1)\"> and <img src=\"https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"B(x_2, y_2)\">. Picture a straight line between them. To measure it, think of the x-difference, <img src=\"https://s0.wp.com/latex.php?latex=x_2+-+x_1&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x_2+-+x_1&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_2+-+x_1&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"x_2 - x_1\">, and the y-difference, <img src=\"https://s0.wp.com/latex.php?latex=y_2+-+y_1&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=y_2+-+y_1&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=y_2+-+y_1&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"y_2 - y_1\">. Square those, add them up – <img src=\"https://s0.wp.com/latex.php?latex=%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"(x_2 - x_1)^2 + (y_2 - y_1)^2\">– and then take the square root. That’s your distance: <img src=\"https://s0.wp.com/latex.php?latex=D+%3D+%5Csqrt%7B%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=D+%3D+%5Csqrt%7B%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=D+%3D+%5Csqrt%7B%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"D = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}\"></p><p>This works in 3D too. For points <img src=\"https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%2C+z_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%2C+z_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%2C+z_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A(x_1, y_1, z_1)\"> and <img src=\"https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%2C+z_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%2C+z_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%2C+z_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"B(x_2, y_2, z_2)\">, the distance is just: <img src=\"https://s0.wp.com/latex.php?latex=D+%3D+%5Csqrt%7B%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2+%2B+%28z_2+-+z_1%29%5E2%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=D+%3D+%5Csqrt%7B%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2+%2B+%28z_2+-+z_1%29%5E2%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=D+%3D+%5Csqrt%7B%28x_2+-+x_1%29%5E2+%2B+%28y_2+-+y_1%29%5E2+%2B+%28z_2+-+z_1%29%5E2%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"D = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2 + (z_2 - z_1)^2}\">. Same idea, one more step.</p><p>Got a <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D%28x%2C+y%2C+z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D%28x%2C+y%2C+z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BV%7D%7D%28x%2C+y%2C+z%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{V}}(x, y, z)\"> with a length <img src=\"https://s0.wp.com/latex.php?latex=D+%5Cneq+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=D+%5Cneq+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=D+%5Cneq+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"D \\neq 0\">? Divide its components <img src=\"https://s0.wp.com/latex.php?latex=x%2C+y%2C+z&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=x%2C+y%2C+z&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%2C+y%2C+z&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"x, y, z\"> by <img src=\"https://s0.wp.com/latex.php?latex=D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"D\">. That gives you a unit , or a . We call this dividing step . These have a of 1 and point the way, making things simpler to figure out. Why are they big in computer graphics?</p><p>Normals show how light lands on surfaces – think brightness, shadows, or shiny reflections.</p><p>They help tricks like Phong shading make lighting look smooth and nice.</p><p><strong>Reflection and Refraction</strong>For stuff like water or glass, normals handle reflections and bending light.</p><p>In games, they tell objects how to hit or bounce off each other.</p><p>Normals fake extra detail in things like normal mapping, no extra shapes needed.</p><p><em>So, you’ve picked up the essentials – how to work with points and vectors, and even how to measure a vector’s length. Just a few more steps, and you’ll have this whole thing figured out!</em></p><p>What else can we do with vectors? There’s this thing called the  or – that’s super useful in geometry, physics, and graphics. Surprise: it gives you a (or ), not a . It’s all about checking how much two vectors go the same way. Can we figure that out? Sure, here’s how:</p><p>Put simply, the dot product here just looks at the  of <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{B}}\"> – how much of it <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A}}\">.</p><p>When one vector’s y-part is zero, like <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D%281%2C+0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D%281%2C+0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D%281%2C+0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A}}(1, 0)\">, it’s easy to see, like we showed before. But what if the y-part isn’t zero? </p><p>Let’s try two vectors: <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D+%3D+%282%2C+1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D+%3D+%282%2C+1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D+%3D+%282%2C+1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A}} = (2, 1)\"> and <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D+%3D+%283%2C+2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D+%3D+%283%2C+2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D+%3D+%283%2C+2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{B}} = (3, 2)\">. Let’s do something fun: rotate <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{B}}\"> around so it sits on the x-axis. That zeroes out its y-part, leaving it pointing flat across. We’ll swing <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A}}\"> the same way too. Then, we just see how much <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A}}\"> lines up with this new <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BB%7D%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{B}}\">.</p><p>And <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D%282%2C+1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D%282%2C+1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%7D%7D%282%2C+1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A}}(2, 1)\"> gets the same twist, ending up as:<img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%27%7D%7D+%3D+%282.21880%2C+-0.27735%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%27%7D%7D+%3D+%282.21880%2C+-0.27735%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%27%7D%7D+%3D+%282.21880%2C+-0.27735%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A'}} = (2.21880, -0.27735)\">.</p><p>Now it’s simple: we just find the dot product between a vector flat on the x-axis and one with both x and y parts.</p><p>Since rotating doesn’t change the dot product, we calculate:<img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%27%7D%7D+%5Ccdot+%5Cvec%7B%5Cmathbf%7BB%27%7D%7D+%3D+%282.21880%2C+-0.27735%29+%5Ccdot+%283.60555%2C+0%29+%3D+2.21880+%5Ccdot+3.60555+%2B+%28-0.27735%29+%5Ccdot+0+%3D+8.00000&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%27%7D%7D+%5Ccdot+%5Cvec%7B%5Cmathbf%7BB%27%7D%7D+%3D+%282.21880%2C+-0.27735%29+%5Ccdot+%283.60555%2C+0%29+%3D+2.21880+%5Ccdot+3.60555+%2B+%28-0.27735%29+%5Ccdot+0+%3D+8.00000&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7BA%27%7D%7D+%5Ccdot+%5Cvec%7B%5Cmathbf%7BB%27%7D%7D+%3D+%282.21880%2C+-0.27735%29+%5Ccdot+%283.60555%2C+0%29+%3D+2.21880+%5Ccdot+3.60555+%2B+%28-0.27735%29+%5Ccdot+0+%3D+8.00000&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{A'}} \\cdot \\vec{\\mathbf{B'}} = (2.21880, -0.27735) \\cdot (3.60555, 0) = 2.21880 \\cdot 3.60555 + (-0.27735) \\cdot 0 = 8.00000\"></p><p>So in the end, there is another way to calculate the dot product using the formula: </p><p>The cosine function appears here because it naturally describes alignment:</p><p>Picture this: you’re in a dark room, holding a laser pointer. You aim it at a wall, but not straight on – it’s at an angle. The light doesn’t just hit one spot; it stretches across the wall. How long that streak is depends on your aim:</p><ul><li>When the laser is  at the wall, the projection is maximal, meaning the  is . For unit vectors, the result is 1. </li><li>When the laser is , the projection , resulting in a . </li><li>When the laser is to the wall, there is no projection at all, and the  equals . </li><li>When the laser is pointing in the direction from the wall, the  is . For unit vectors, the result is -1.</li></ul><p><em>Just a heads-up: we’re deep in dot product territory. It’s a big topic, full of details, but super important. If you get the dot product – really get it, with all its twists – it’ll make everything later so much easier. It’s the heart of all the cool stuff coming up.</em></p><p>What if we need to determine the angle <img src=\"https://s0.wp.com/latex.php?latex=%5Ctheta+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Ctheta+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctheta+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\theta \"> between two vectors? We can <img src=\"https://s0.wp.com/latex.php?latex=%5Ctheta+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Ctheta+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctheta+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\theta \"> using the inverse cosine function:</p><p>Think of arccos as a way to <strong>convert a similarity measurement into an actual angle</strong>:</p><p>This is extremely useful in applications like robotics, physics, 3D graphics, and AI, where finding angles between directions is crucial. The function always returns an angle in the range from <img src=\"https://s0.wp.com/latex.php?latex=0%5E%5Ccirc+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=0%5E%5Ccirc+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=0%5E%5Ccirc+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"0^\\circ \"> to <img src=\"https://s0.wp.com/latex.php?latex=180%5E%5Ccirc+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=180%5E%5Ccirc+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=180%5E%5Ccirc+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"180^\\circ \"> (or from <img src=\"https://s0.wp.com/latex.php?latex=0+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=0+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=0+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"0 \"> to <img src=\"https://s0.wp.com/latex.php?latex=%5Cpi+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cpi+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cpi+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\pi \"> radians).</p><p>Now, let’s introduce the final operation you’ll frequently encounter: the , also known as the . Intuitively, this operation is simpler than the  because the result is something you can visualize – a new .</p><h4><em>At this stage, I’d like to ask for your patience – don’t worry about where this formula comes from. Just memorize it for now, and later you’ll “teleport” back to it from another section.</em></h4><p>The cross product can also be expressed as:<img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+%3D+%7C%5Cvec%7B%5Cmathbf%7Ba%7D%7D%7C+%5Ccdot+%7C%5Cvec%7B%5Cmathbf%7Bb%7D%7D%7C+%5Ccdot+%5Csin%28%5Ctheta%29+%5Ccdot+%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+%3D+%7C%5Cvec%7B%5Cmathbf%7Ba%7D%7D%7C+%5Ccdot+%7C%5Cvec%7B%5Cmathbf%7Bb%7D%7D%7C+%5Ccdot+%5Csin%28%5Ctheta%29+%5Ccdot+%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+%3D+%7C%5Cvec%7B%5Cmathbf%7Ba%7D%7D%7C+%5Ccdot+%7C%5Cvec%7B%5Cmathbf%7Bb%7D%7D%7C+%5Ccdot+%5Csin%28%5Ctheta%29+%5Ccdot+%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{c}} = |\\vec{\\mathbf{a}}| \\cdot |\\vec{\\mathbf{b}}| \\cdot \\sin(\\theta) \\cdot \\vec{\\mathbf{n}} \">where <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{n}} \"> is the  perpendicular to the plane containing <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{a}} \"> and <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{b}} \">.</p><p>The direction of <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{c}} \"> (and <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bn%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{n}} \">) is determined by the : curl the fingers of your right hand from <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{a}} \"> to <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{b}} \">, and your thumb will point in the direction of <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bc%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{c}} \">.</p><p><em>Finally, let’s conclude our detour and return to our original task – determining whether a point is inside a triangle! At this stage, we have covered the basic geometric primitives: points, vectors, and operations on them. Now, with this knowledge, let’s finally solve our problem.</em></p><h3>Is the point contained within the triangle? Cross Product Method</h3><p>This method’s easy and makes sense, and it pulls together all the math we’ve gone over. For each edge of the triangle, we compute a cross product between the edge vector and the vector from the test point <img src=\"https://s0.wp.com/latex.php?latex=P+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P \"> to one of the triangle’s vertices. That gives us three vectors that act like normals.</p><p>Each normal <img src=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BN%7D_i&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BN%7D_i&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbf%7BN%7D_i&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\mathbf{N}_i\"> represents the orientation of the test point relative to a specific edge of the triangle.If <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> is inside the triangle, all three cross-product normals should point in the same direction. If <strong>all three dot products have the same sign</strong>, then the point lies inside the triangle. Otherwise, at least one normal vector points in the opposite direction, indicating that <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> is outside.</p><p><em>It is very important to note that this method works correctly only when the point lies in the . This condition is often neglected in computer graphics since most algorithms do not require it. However, if you are working with engineering software and require precise calculations, it makes sense to add a check to ensure that the point lies in the triangle’s plane. In practice, such a check is usually performed earlier in the pipeline, calling the point-in-triangle test, as part of collision detection, intersection tests, or geometric preprocessing.</em></p><div><pre title=\"\">bool isPointInsideTriangle(glm::dvec3 P, glm::dvec3 A, glm::dvec3 B, glm::dvec3 C, double epsilon) {\n    // Compute the normal of triangle ABC and check if it's degenerate\n    glm::dvec3 N = glm::cross(B - A, C - A);\n\n    // Compute normals for sub-triangles PBC, PCA, PAB\n    glm::dvec3 U = glm::cross(B - P, C - P);  // Normal of PBC\n    glm::dvec3 V = glm::cross(C - P, A - P);  // Normal of PCA\n    glm::dvec3 W = glm::cross(A - P, B - P);  // Normal of PAB\n\n    // Compute scalar products of sub-triangle normals with the triangle normal\n    double dot_u = glm::dot(U, N);\n    double dot_v = glm::dot(V, N);\n    double dot_w = glm::dot(W, N);\n\n    return sameSigns(dot_u, dot_v, dot_w, epsilon);\n}\n\n</pre></div><p>The  method can run into trouble because of small math mistakes. These pop up when numbers get rounded off during multiplying and subtracting. It’s a problem when vectors are almost the same, especially in really thin (or as we call it – ) triangles, and the answer might be off. Also, the final check – seeing if all normals point the same way – can mess up. If those normals shift and look almost at right angles because of these tiny errors, the test might call an inside point outside. helps by giving some extra space for those mistakes, making the checks better. You need to pick the right epsilon, though, or you might count outside points as inside or miss points that are barely inside.</p><h3>Digression 3. Vector Operations: Functions vs. Operators</h3><p>When handling vectors, libraries like offer functions like and for scalar and vector products, instead of using signs like * or %. This has some good points. For one, and make it clear what math you’re doing, so the code’s easier to understand. Take  – it shows right away it’s a dot product. But  could mean different things, like multiplying by a number, doing it part by part, or even a dot product, depending on the setup. Same with  – it’s obvious it’s a cross product, while % isn’t something everyone knows and might remind people of division leftovers instead.</p><p>Another thing: functions like and make your code safer and easier to keep up. Signs like * can do lots of jobs – like multiplying by a number or working with matrices – which can mix things up if you’re not sure what’s meant or if the pieces don’t fit right. But and are built just for vectors, so you’re less likely to mess up. For instance, if you try with the wrong mix – like a and a plain  – a good library will catch it before the code even runs. With *, it might quietly do something you didn’t want.</p><h3>Digression 4. Degenerate triangles</h3><p>triangles are bad – they don’t help anyone. They hold no real info. Either all their points sit on top of each other, or they line up straight. So, their is pretty much . To spot these, we can figure out the triangle’s area using the  of its edge vectors and see if it’s tiny – below a small limit, . This way, we catch triangles that barely exist, whether because the points overlap or fall in a line, and kick them out before moving on. Here’s some code that checks if a triangle’s degenerate by looking at its area:</p><div><pre title=\"\">bool isDegenerate(glm::dvec3 A, glm::dvec3 B, glm::dvec3 C, double area_epsilon) {\n    // Compute vectors along two edges of the triangle\n    glm::dvec3 AB = B - A;\n    glm::dvec3 AC = C - A;\n\n    // Compute the cross product to get the normal vector\n    glm::dvec3 N = glm::cross(AB, AC);\n\n    // Compute the area as half the magnitude of the normal\n    double area = 0.5 * glm::length(N);\n\n    // Return true if the area is below the threshold, indicating degeneracy\n    return area &lt; area_epsilon;\n}\n</pre></div><p>So, we need to put this check at the beginning of our isPointInsideTriangle method. <em>Next, we would like to address the problem mentioned at the beginning – we want to check if the point lies in the plane of the triangle.</em></p><p>A plane in 3D is like a big, flat sheet that goes on forever, set by a point and a normal vector. And guess what? The  – or , as we call it now – saves the day again, tying all this geometry into a simple idea. Imagine a plane with a <img src=\"https://s0.wp.com/latex.php?latex=P_0%28x_0%2C+y_0%2C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P_0%28x_0%2C+y_0%2C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P_0%28x_0%2C+y_0%2C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P_0(x_0, y_0, z_0)\"> and a <img src=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BN%7D+%3D+%28A%2C+B%2C+C%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cmathbf%7BN%7D+%3D+%28A%2C+B%2C+C%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbf%7BN%7D+%3D+%28A%2C+B%2C+C%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\mathbf{N} = (A, B, C)\">, which stands straight up from the plane, at right angles to anything on it.</p><div><pre title=\"\">struct Plane {\n    glm::dvec3 N;  // A,B,C\n    double D;\n};\n</pre></div><p>To check if a point <img src=\"https://s0.wp.com/latex.php?latex=P%28x%2C+y%2C+z%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%28x%2C+y%2C+z%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%28x%2C+y%2C+z%29+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P(x, y, z) \"> lies on the plane, we evaluate:</p><ul><li>If the result 0 (within a small tolerance), the point lies exactly on the plane.</li><li>If , the point is above the plane.</li><li>If , the point is below the plane.</li></ul><div><pre title=\"\">bool isOnPlane(Plane plane, glm::dvec3 P, double epsilon) {\n    return std::abs(glm::dot(plane.N, P) + plane.D) &lt;= epsilon;\n}\n</pre></div><p>To make a with a and a  vector, start with the plane equation. Plug in your point <img src=\"https://s0.wp.com/latex.php?latex=%28x_0%2C+y_0%2C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%28x_0%2C+y_0%2C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x_0%2C+y_0%2C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"(x_0, y_0, z_0)\"> to figure out the constant <img src=\"https://s0.wp.com/latex.php?latex=D+%3D+-%28A+x_0+%2B+B+y_0+%2B+C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=D+%3D+-%28A+x_0+%2B+B+y_0+%2B+C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=D+%3D+-%28A+x_0+%2B+B+y_0+%2B+C+z_0%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"D = -(A x_0 + B y_0 + C z_0)\">.</p><div><pre title=\"\">Plane createPlane(glm::dvec3 P, glm::dvec3 N) {\n    N = glm::normalize(N);\n    double D = -glm::dot(N, P);\n    return { N, D };\n}\n</pre></div><p>If you need to see if the point’s on the triangle’s plane, add this step after ruling out a bad triangle. </p><p><em>Think we’re done? Not even close. The method we went over is simple and pretty quick, but it’s got some weak spots, like we said before. Next, we’ll check out other ways to do this, and for that, we’ll need to dig even more into geometry basics.</em></p><h3>Digression 6. Can you compute a cross product in 2D?</h3><p>No, you cannot compute a  in a strictly two-dimensional space in the same way as in 3D – because the result is not a vector in 2D. However, if we extend the 2D vectors into 3D by assuming their <img src=\"https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"z \">-coordinates are zero and use the standard 3D cross product formula:</p><p>and set the <img src=\"https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"z \">-coordinates to zero, treating 2D vectors as lying in the <img src=\"https://s0.wp.com/latex.php?latex=xy+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=xy+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=xy+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"xy \">-plane of 3D space, we obtain:</p><p>Since the only nonzero component is the <img src=\"https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=z+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"z \">-coordinate, we can define the 2D cross product as the scalar:</p><p>This scalar represents the signed area of the parallelogram formed by <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Ba%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{a}} \"> and <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7B%5Cmathbf%7Bb%7D%7D+&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{\\mathbf{b}} \">.</p><p>Thus, the signed area can be used to determine whether a 2D point is inside a 2D triangle. To do this, you need to compute the signed area of the triangle ABC and all the “sub-triangles” ABP, BCP, and CAP. If all the areas have the same sign, then the point lies inside the triangle.</p><div><pre title=\"\">bool isPointInsideTriangle(glm::dvec2 P, glm::dvec2 A, glm::dvec2 B, glm::dvec2 C, double area_epsilon) {\n    // Compute the area of the triangle\n    double triangleArea = area(A, B, C);\n\n    // Check if the triangle is degenerate (area too small)\n    if (std::abs(triangleArea) &lt; area_epsilon)\n        return false;\n\n    // Compute areas of sub-triangles formed by point P\n    double area1 = area(A, B, P);\n    double area2 = area(B, C, P);\n    double area3 = area(C, A, P);\n\n    // Check if all sub-triangle areas have the same orientation (same sign)\n    return sameSigns(triangleArea, area1, area2, area3, area_epsilon);\n}\n</pre></div><p>To get a triangle’s area using the 2D cross product, just take the absolute value of that cross product and cut it in half.</p><div><pre title=\"\">double area(glm::dvec2 A, glm::dvec2 B, glm::dvec2 C) {\n    glm::dvec2 vec1 = B - A;\n    glm::dvec2 vec2 = C - A;\n    double crossProductValue = vec1.x * vec2.y - vec1.y * vec2.x;\n    return 0.5 * crossProductValue;\n}\n</pre></div><p>Now, let’s finally return to where we started – the Triangle!</p><p>Phew! We took a detour, but now let’s return to the triangle. Consider a triangle defined by three vertices: <img src=\"https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%2C+z_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%2C+z_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A%28x_1%2C+y_1%2C+z_1%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A(x_1, y_1, z_1)\">, <img src=\"https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%2C+z_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%2C+z_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%28x_2%2C+y_2%2C+z_2%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"B(x_2, y_2, z_2)\">, and <img src=\"https://s0.wp.com/latex.php?latex=C%28x_3%2C+y_3%2C+z_3%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=C%28x_3%2C+y_3%2C+z_3%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28x_3%2C+y_3%2C+z_3%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"C(x_3, y_3, z_3)\">. Some useful properties we can compute are:</p><p>Picture a different triangle with the same barycentric coordinates <img src=\"https://s0.wp.com/latex.php?latex=%28u%2C+v%2C+w%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%28u%2C+v%2C+w%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28u%2C+v%2C+w%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"(u, v, w)\"> for a point. They still tell us how it sits relative to the corners.</p><p><em>How do barycentric coordinates solve our first question? It’s pretty easy. If all the weights u, v, w are between 0 and 1, the point is inside the triangle.</em></p><h3>Digression 7. Lines and Segments</h3><p>For example: take <img src=\"https://s0.wp.com/latex.php?latex=P%5Cleft%28%5Cfrac%7B1%7D%7B3%7D%2C+0%2C+0%5Cright%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%5Cleft%28%5Cfrac%7B1%7D%7B3%7D%2C+0%2C+0%5Cright%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%5Cleft%28%5Cfrac%7B1%7D%7B3%7D%2C+0%2C+0%5Cright%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\\left(\\frac{1}{3}, 0, 0\\right)\">. The weights come out as <img src=\"https://s0.wp.com/latex.php?latex=u+%3D+%5Cfrac%7B2%7D%7B3%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=u+%3D+%5Cfrac%7B2%7D%7B3%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=u+%3D+%5Cfrac%7B2%7D%7B3%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"u = \\frac{2}{3}\"> and <img src=\"https://s0.wp.com/latex.php?latex=w+%3D+%5Cfrac%7B1%7D%7B3%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=w+%3D+%5Cfrac%7B1%7D%7B3%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=w+%3D+%5Cfrac%7B1%7D%7B3%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"w = \\frac{1}{3}\">. That means <img src=\"https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A\"> is pulling harder here.</p><p>Start with the segment vector <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D+%3D+B+-+A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D+%3D+B+-+A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D+%3D+B+-+A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AB} = B - A\">, and the vector from <img src=\"https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A\"> to <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\">, which is <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%3D+P+-+A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%3D+P+-+A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%3D+P+-+A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AP} = P - A\">. Think of <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> as sitting somewhere along the line:</p><p>Now, use the dot product with <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AB}\"> on both sides:</p><p>Then, the other weight is just <img src=\"https://s0.wp.com/latex.php?latex=u+%3D+1+-+w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=u+%3D+1+-+w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=u+%3D+1+-+w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"u = 1 - w\">.</p><h3>Barycentric Coordinates: Triangle</h3><p>Let’s figure out if point <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> is inside triangle <img src=\"https://s0.wp.com/latex.php?latex=ABC&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=ABC&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=ABC&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"ABC\">, but this time, let’s keep it really simple. Imagine you’re at <img src=\"https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A\">, and you’ve got paths to <img src=\"https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"B\"> and <img src=\"https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"C\">. Any point inside the triangle is like a mix of steps toward <img src=\"https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"B\"> and <img src=\"https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"C\">.</p><p>So how do we find <img src=\"https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"v\"> and <img src=\"https://s0.wp.com/latex.php?latex=w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"w\">? Think of it as measuring how much <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> leans toward each path. We can “ask” <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AP}\"> how much it matches <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAB%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AB}\"> and <img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAC%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAC%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAC%7D&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AC}\"> using dot products – like checking shadows:</p><p>This gives us two clues:<img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%5Ccdot+%5Cvec%7BAB%7D+%3D+v+%28%5Cvec%7BAB%7D+%5Ccdot+%5Cvec%7BAB%7D%29+%2B+w+%28%5Cvec%7BAC%7D+%5Ccdot+%5Cvec%7BAB%7D%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%5Ccdot+%5Cvec%7BAB%7D+%3D+v+%28%5Cvec%7BAB%7D+%5Ccdot+%5Cvec%7BAB%7D%29+%2B+w+%28%5Cvec%7BAC%7D+%5Ccdot+%5Cvec%7BAB%7D%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%5Ccdot+%5Cvec%7BAB%7D+%3D+v+%28%5Cvec%7BAB%7D+%5Ccdot+%5Cvec%7BAB%7D%29+%2B+w+%28%5Cvec%7BAC%7D+%5Ccdot+%5Cvec%7BAB%7D%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AP} \\cdot \\vec{AB} = v (\\vec{AB} \\cdot \\vec{AB}) + w (\\vec{AC} \\cdot \\vec{AB})\"><img src=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%5Ccdot+%5Cvec%7BAC%7D+%3D+v+%28%5Cvec%7BAB%7D+%5Ccdot+%5Cvec%7BAC%7D%29+%2B+w+%28%5Cvec%7BAC%7D+%5Ccdot+%5Cvec%7BAC%7D%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%5Ccdot+%5Cvec%7BAC%7D+%3D+v+%28%5Cvec%7BAB%7D+%5Ccdot+%5Cvec%7BAC%7D%29+%2B+w+%28%5Cvec%7BAC%7D+%5Ccdot+%5Cvec%7BAC%7D%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvec%7BAP%7D+%5Ccdot+%5Cvec%7BAC%7D+%3D+v+%28%5Cvec%7BAB%7D+%5Ccdot+%5Cvec%7BAC%7D%29+%2B+w+%28%5Cvec%7BAC%7D+%5Ccdot+%5Cvec%7BAC%7D%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\vec{AP} \\cdot \\vec{AC} = v (\\vec{AB} \\cdot \\vec{AC}) + w (\\vec{AC} \\cdot \\vec{AC})\"></p><p>To find the coordinates, we solve the two equations above, and the results are:</p><p>Then, the last piece is:<img src=\"https://s0.wp.com/latex.php?latex=u+%3D+1+-+v+-+w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=u+%3D+1+-+v+-+w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=u+%3D+1+-+v+-+w&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"u = 1 - v - w\"></p><p><em>Keep in mind that this method, like the previous one, assumes that the point lies in the .</em></p><div><pre title=\"\">bool isPointInTriangle(glm::dvec3 P, glm::dvec3 A, glm::dvec3 B, glm::dvec3 C, double epsilon) {\n    // Define vectors along edges\n    glm::dvec3 AB = B - A;\n    glm::dvec3 AC = C - A;\n    glm::dvec3 AP = P - A;\n\n    // Compute the normal of triangle ABC\n    glm::dvec3 N = glm::cross(AB, AC);\n\n    // Compute dot products needed for barycentric coordinates\n    double dotABAB = glm::dot(AB, AB);\n    double dotABAC = glm::dot(AB, AC);\n    double dotACAC = glm::dot(AC, AC);\n    double dotAPAB = glm::dot(AP, AB);\n    double dotAPAC = glm::dot(AP, AC);\n\n    // Compute denominator\n    double denom = dotABAB * dotACAC - dotABAC * dotABAC;\n    if (std::abs(denom) &lt; epsilon) \n        return false; // Denominator too small, unstable result\n    \n    double invDenom = 1.0 / denom;\n\n    // Compute barycentric coordinates (v, w, u)\n    double v = (dotACAC * dotAPAB - dotABAC * dotAPAC) * invDenom;\n    double w = (dotABAB * dotAPAC - dotABAC * dotAPAB) * invDenom;\n    double u = 1.0 - v - w;\n\n    // Check if the point lies inside the triangle within epsilon tolerance\n    return (u &gt;= -epsilon) &amp;&amp; (v &gt;= -epsilon) &amp;&amp; (w &gt;= -epsilon);\n}\n\n</pre></div><p><em>If you still think this is the end, it’s not! There is another method that is often used in more precise engineering applications. </em></p><h3>Projection onto a 2D Plane</h3><p>Every triangle in 3D lies flat on a plane, so we can shrink this problem down to 2D. Pick a plane – like the xy-plane, xz-plane, or yz-plane – and project everything onto it.</p><p>Here’s the trick: first, find the plane the triangle’s on. Check if the point’s near it, with a little room for error. If it is, we just need to see if it’s inside the triangle. Since the triangle’s flat in 3D, it’s a 2D question at heart. To keep it easy, we drop one coordinate from the triangle and the point, them down.</p><p><em>Note that checks have been added for  and whether the point lies on the .</em><em>Also, note that in the code below, the from the isDegenerate method could have been reused, but I left it as is for better clarity.</em></p><div><pre title=\"\">bool isPointInsideTriangle(glm::dvec3 P, glm::dvec3 A, glm::dvec3 B, glm::dvec3 C, double epsilon, double area_epsilon) {\n    // Check if the triangle is degenerate\n    if (isDegenerate(A, B, C, area_epsilon))\n        return false;  // Triangle is degenerate\n\n    // Compute the normal of triangle ABC\n    glm::dvec3 N = glm::cross(B - A, C - A);\n\n    // Create the plane from point A and normal, then check if P lies in it\n    Plane plane = createPlane(A, N);\n    if (!isOnPlane(plane, P, epsilon))\n        return false;  // Point is not in the plane\n\n    // Determine the dominant axis for projection\n    glm::dvec3 absN = glm::abs(N);\n    uint8_t dominantAxis = (absN.x &gt; absN.y &amp;&amp; absN.x &gt; absN.z) ? 0 :\n                       (absN.y &gt; absN.z ? 1 : 2);\n\n    // Lambda to drop the dominant axis\n    auto drop = [dominantAxis](glm::dvec3 v) -&gt; glm::dvec2 {\n        return (dominantAxis == 0) ? glm::dvec2(v.y, v.z) :  // Drop X\n               (dominantAxis == 1) ? glm::dvec2(v.x, v.z) :  // Drop Y\n                                     glm::dvec2(v.x, v.y);   // Drop Z\n    };\n\n    // Project the point onto the plane. Note that we checked it with epsilon before, now we want to lie exactly on the plane \n    glm::dvec3 projectedP = projectPointOntoPlane(P, plane);\n\n    // Test in 2D\n    return isPointInsideTriangle(drop(projectedP), drop(A), drop(B), drop(C), epsilon);\n}\n\n</pre></div><p>We drop the coordinate with the largest component in the normal, since it contributes the least to variations across the triangle. The normal shows how the triangle is tilted in space, and its points to the axis the plane is nearly perpendicular to. Removing that axis gives us a reliable 2D projection for checking point inclusion.</p><p>The final thing is to project our point <img src=\"https://s0.wp.com/latex.php?latex=P%28x_p%2C+y_p%2C+z_p%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%28x_p%2C+y_p%2C+z_p%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%28x_p%2C+y_p%2C+z_p%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P(x_p, y_p, z_p)\"> onto the plane, which follows the rule <img src=\"https://s0.wp.com/latex.php?latex=Ax+%2B+By+%2B+Cz+%2B+D+%3D+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=Ax+%2B+By+%2B+Cz+%2B+D+%3D+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=Ax+%2B+By+%2B+Cz+%2B+D+%3D+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"Ax + By + Cz + D = 0\">. We do this by sliding <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> along the plane’s normal <img src=\"https://s0.wp.com/latex.php?latex=N+%3D+%28A%2C+B%2C+C%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=N+%3D+%28A%2C+B%2C+C%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=N+%3D+%28A%2C+B%2C+C%29&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"N = (A, B, C)\"> until it hits the plane at <img src=\"https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P'\">. That’s written as:<img src=\"https://s0.wp.com/latex.php?latex=P%27+%3D+P+-+%5Clambda+N&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%27+%3D+P+-+%5Clambda+N&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%27+%3D+P+-+%5Clambda+N&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P' = P - \\lambda N\">, where <img src=\"https://s0.wp.com/latex.php?latex=%5Clambda&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=%5Clambda&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clambda&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"\\lambda\"> is how far we need to move.</p><p>Since <img src=\"https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P'\"> is on the plane, it fits the equation:<img src=\"https://s0.wp.com/latex.php?latex=A+x%27+%2B+B+y%27+%2B+C+z%27+%2B+D+%3D+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=A+x%27+%2B+B+y%27+%2B+C+z%27+%2B+D+%3D+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=A+x%27+%2B+B+y%27+%2B+C+z%27+%2B+D+%3D+0&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"A x' + B y' + C z' + D = 0\">.</p><p>Thus, <img src=\"https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P%27&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P'\"> is the projection of <img src=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002\" srcset=\"https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;bg=ffffff&amp;fg=000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x\" alt=\"P\"> onto the plane.</p><div><pre title=\"\">glm::dvec3 projectPointOntoPlane(glm::dvec3 P, Plane plane) {\n    double lambda = (glm::dot(plane.N, P) + plane.D) / glm::dot(plane.N, plane.N);\n    return P - lambda * plane.N;\n}\n</pre></div><p>Usually, this is where you’d expect a conclusion for the article – something about which method is better, which one’s worse, and why we picked this over that other one. But since this is just a from a book, there’s no big wrap-up here. Instead, it rolls right into a more advanced, high-level problem down the road. So, for this post, the conclusion isn’t about crowning a winner among the methods. It’s more about how cool it is to break a problem down into tiny bricks and figure it out step by step with some neat math tools. What I really wanted to show here is how you can tackle the same task – checking if a point’s inside a triangle – in totally different ways. We’ve got the , the  trick, and that  move, each with its own strengths and trade-offs. They all get the job done, but they’re like different paths up the same hill. And by now, you’ve probably felt how much you need to know to code this stuff – , , nuances, and a touch of with to keep it all steady. It’s a lot of concepts to juggle! In the end, I hope messing around with this brought you some fun and maybe a little buzz from seeing how math and code can dance together.</p>","contentLength":25851,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1jhgr3t/is_the_point_inside_the_triangle/"},{"title":"Database Protocols Are Underwhelming - byroot","url":"https://byroot.github.io/performance/2025/03/21/database-protocols.html","date":1742670677,"author":"/u/Smooth-Zucchini4923","guid":599,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1jhg3xz/database_protocols_are_underwhelming_byroot/"},{"title":"3 Traits of Good Test Suites","url":"https://elijahpotter.dev/articles/3_traits_of_good_test_suites","date":1742670185,"author":"/u/ChiliPepperHott","guid":598,"unread":true,"content":"<p>As ev­i­denced by my pre­vi­ous posts on <a href=\"https://elijahpotter.dev/articles/LLM_assisted_fuzzing\">LLM-Assisted Fuzzing</a>, I’ve been ded­i­cat­ing a lot of my men­tal band­width to main­tain­ing a low false-pos­i­tive rate while we im­prove <a href=\"https://github.com/automattic/harper\">Harper’s rule cov­er­age</a>. Part of that is through fuzzing and dog­food­ing, some can be through sta­tis­tics, but the ﬁrst lines of de­fense will con­tinue to be unit and in­te­gra­tion test­ing. This past week par­tic­u­larly, I’ve been read­ing up on how other <a href=\"https://github.com/rust-lang/rust-analyzer\">big lint­ing pro­grams</a> ap­proach this prob­lem.</p><h2>1. Test Features, Not Code</h2><p>I of­ten ask my­self: am I spend­ing more time think­ing or talk­ing about the thing, or am I spend­ing more time do­ing the thing? I’ve per­son­ally seen how pro­jects fall into de­cline be­cause their lead­ers are more in­ter­ested in plan­ning than do­ing.</p><p>In the con­text of soft­ware test­ing, this mantra is trans­formed intotest fea­tures, not code.” To my eye, good code is ﬂex­i­ble and self-ex­plana­tory. Tests that hook deeply into ap­pli­ca­tion or li­brary in­ter­nals make code less ﬂex­i­ble and harder to read.</p><p>I es­pe­cially like Alex Kladov’s heuris­tic for this: the neural net­work test.</p><blockquote><p>Can you re-use the test suite if your en­tire soft­ware is re­placed with an opaque neural net­work?” - Alex Kladov</p></blockquote><p>It’s not a ques­tion of whether a neural net­work would pass the test suite, only whether the test suite could work for it. If the an­swer is no, the tests are likely test­ing code, not fea­tures.</p><p>The speed at which you can build and run tests (unit, sta­tic, in­te­gra­tion, etc.) is a force-mul­ti­plier for every­thing else. You can val­i­date ideas sooner, run  faster, and get con­trib­u­tors on-boarded in less time.</p><p>Our goal to be fast at run­time dove­tails quite nicely into this, so it’s some­thing Harper al­ready does quite well. Moving for­ward, we need to make sure that we don’t rely on any kind of  in our tests, since that con­tin­ues to be the slow­est part of most Harper in­te­gra­tions.</p><p>We can sim­plify pro­grams like Harper down into a sin­gle func­tion which con­sumes text and re­turns a list of ob­served prob­lems.</p><pre><code>(text: ) &lt;Lint&gt;{\n    \n}\n</code></pre><p>Most test­ing we are in­ter­ested can be done with as­ser­tion func­tions that de­clare what qual­i­ties the out­put should have with a spe­ciﬁc in­put.</p><p>For ex­am­ple, we have a func­tion called as­sert_­sug­ges­tion_re­sult, which runs a gram­mat­i­cally in­cor­rect string through Harper, ap­plies the ﬁrst re­sult­ing sug­ges­tion and checks whether the edited string matches a given value.</p><pre><code>() {\n    (\n        ,\n        ThenThan::(),\n        ,\n    );\n}\n</code></pre><p>It’s also vi­tal that these as­ser­tions show good, read­able er­ror mes­sages when they fail. Each time I’ve im­proved their logs, I get un­prompted pos­i­tive feed­back from con­trib­u­tors.</p><p>Moving for­ward, I’d like to cre­ate a more di­verse ar­ray as­ser­tions like this, as well as bet­ter-doc­u­ment their use. A lot of the cur­rent back-and-forth for rule con­tri­bu­tions is re­lated this.</p><p>I hope some­one does. Good test suites are some­thing I’m con­tin­u­ing <a href=\"https://automattic.com/creed/never-stop-learning/\">to learn how to build</a>. I un­der­stand that a lot of what I’ve said here does­n’t ap­ply to other kinds of ap­pli­ca­tions or code­bases. If there’s nu­ance I’m not cov­er­ing here, let me know!</p>","contentLength":3448,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1jhfx0a/3_traits_of_good_test_suites/"},{"title":"Self-Hosting Go Modules","url":"https://nicktrevino.com/self-hosting-go-modules.html","date":1742666558,"author":"/u/Hyperlisk","guid":601,"unread":true,"content":"<p>I've always been a proponent of self-hosting. Recently I've been doing more work with Go and wanted to host my own modules. I'm not super fond of hosting my code on GitHub because I feel like I don't totally own anything that I don't have root on. So I decided to look into how Go fetches modules and what it takes to host my own.</p><p>There are a few reasons why I like to self-host:</p><ul><li> Like I mentioned, if I don't have root on the box that is hosting my code then I don't feel in control.</li><li> Touching every part of the stack gives you insights into how everything fits together.</li><li> I really enjoy building software, so learning new things is always interesting to me.</li></ul><p>While I've used Go, I haven't had to think too much about how it actually works under-the-hood. Luckily, <a target=\"_blank\" href=\"https://pkg.go.dev/cmd/go#hdr-Remote_import_paths\">Go's documentation</a> is very clear about how it fetches modules, if a little dense. Here's the gist of it:</p><ul><li>: The  path in  can provide a VCS specifier (to point to a repo), or no specifier (to use HTTP).</li><li>: A  tag pulled from the module path (taken as an HTTP URL) points to a VCS or <a target=\"_blank\" href=\"https://go.dev/ref/mod#serving-from-proxy\"></a> can be used to point to a URL that implements the GOPROXY protocol for the module.</li><li>: If using a VCS, then it is dependent on the VCS. Using  and the GOPROXY protocol only requires a few static files to specify versions and module bundles.</li></ul><p>Once I realized that all Go needs is a directory structure containing , , , and  files to fetch modules, I realized it was easily doable. This is when the idea of  came to be.</p><div><div>A simple static file host is enough to serve Go modules reliably.</div></div><p><a href=\"https://code.nicktrevino.com/conr\" target=\"_blank\">CONR</a> (ode nly, o epo) is a tool I wrote originally in TypeScript/<a target=\"_blank\" href=\"https://google.github.io/zx/\">zx</a> and translated into Go with ChatGPT. The goal: point CONR at your existing Git repositories, and it automatically does the heavy lifting to package them for self-hosting. Here's a quick rundown:</p><ol><li>: Make sure your Go modules have valid semantic version tags (e.g. ).</li><li>: <code>go install code.nicktrevino.com/conr/cmd/conr@latest</code></li><li>: <code>conr --mod /path/to/myrepo --outDir ./dist --showSkips</code></li></ol><div><div>You can pass  multiple times if you have multiple modules you'd like to package up.</div></div><p>When done, the  folder will contain a structure that Go's module downloader loves:</p><code><pre>dist/&lt;module/path&gt;/@v/list\ndist/&lt;module/path&gt;/@v/v1.0.0.mod\ndist/&lt;module/path&gt;/@v/v1.0.0.zip\ndist/&lt;module/path&gt;/@v/v1.0.0.info\ndist/&lt;module/path&gt;/@latest\n</pre></code><p>These files map directly to the requests Go makes when you  a module. From here all that is left is to throw them on the internet at  with the proper  tag. For example, I host my modules at  on this subdomain and have my <code>&lt;meta name=\"go-import\" content=\"code.nicktrevino.com mod https://code.nicktrevino.com/go.mod\"&gt;</code> tag on both <a target=\"_blank\" href=\"https://code.nicktrevino.com/conr/\">CONR's home page</a>, and the <a target=\"_blank\" href=\"https://code.nicktrevino.com/\">root of the subdomain</a>. I placed it on both pages because Go will follow and double-check the meta tags.</p><h2>Hosting the Generated Files</h2><p>So on to hosting the files. I've mentioned Caddy before, but it has to be one of my favorite pieces of software recently. Caddy makes static file hosting a breeze with <a target=\"_blank\" href=\"https://caddyserver.com/docs/caddyfile/directives/file_server\">its  directive</a>. While I use Cloudflare Tunnel to expose my services, Caddy makes a lot of sense for self-hosting due to automatic TLS handling (if configured). Here's an example  that will serve everything from  which you can dump the output into:</p><code><pre>{\n  admin off\n  debug on\n}\n\n:443 {\n  log\n\n  handle /go.mod/* {\n    header Content-Type text/plain\n  }\n\n  file_server browse {\n    root /www\n  }\n}\n</pre></code><div><div>Note that I purposefully add the  parameter to , but you can certainly leave it off if it makes you more comfortable.</div></div><p>Once Caddy was running, I tested with fetching another module and  fetched from my domain successfully!</p><p>Finishing this project felt liberating. I discovered that Go modules are fundamentally a simple set of files served at predictable URLs, and was able to easily follow the Go documentation to build . In the end, combining that with a minimal Caddy setup gave me everything I needed for a robust, self-hosted module repository that I trust.</p><p>Hopefully I've inspired others to take the self-hosting journey for their own Go modules!</p>","contentLength":3969,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1jheiz6/selfhosting_go_modules/"},{"title":"Understanding Faults and Fault Tolerance in Distributed Systems","url":"https://newsletter.scalablethread.com/p/understanding-faults-and-fault-tolerance","date":1742645492,"author":"/u/scalablethread","guid":603,"unread":true,"content":"<p>Software applications rely on distributed systems for data storage, computation, and real-time processing. These systems spread workloads across multiple nodes (servers, databases, or services) to improve scalability and availability. However, distributed systems face a critical challenge: faults. Their inherent complexity makes them susceptible to various types of failures. Fault tolerance is the ability of a system to continue operating correctly despite faults in some of its components.</p><ul><li><ul><li><p>Example: A server in a cloud cluster loses network connectivity due to a faulty router.</p></li></ul></li><li><ul><li><p>Example: A microservice crashes after encountering an unhandled null pointer exception.</p></li></ul></li><li><ul><li><p>Example: A developer deploys a buggy update that corrupts a distributed cache.</p></li></ul></li><li><ul><li><p>Example: A database replica in Europe becomes unreachable due to an undersea cable cut.</p></li></ul></li><li><p><a href=\"https://newsletter.scalablethread.com/p/what-is-the-byzantine-generals-problem\" rel=\"\">sending conflicting or malicious information</a></p></li></ul><p>When faults occur in a distributed system, they can impact the overall system functionality and user experience.</p><ul><li><p><a href=\"https://newsletter.scalablethread.com/p/single-leader-multi-leader-and-leaderless\" rel=\"\">replication </a></p></li><li><p><a href=\"https://newsletter.scalablethread.com/i/146142578/partition-tolerance\" rel=\"\">network partitions</a></p></li></ul><p>This involves creating multiple copies of critical data or components across different nodes. If one replica fails, others can take over, ensuring continued availability and data durability.</p><ul><li><p><strong>Passive Replication (Standby):</strong></p></li></ul><p>This includes having mechanisms to detect when a component has failed.</p><ul></ul><ul></ul><ul></ul><p><em>If you enjoyed this article, please hit the ❤️ like button.</em></p><p><em>If you think someone else will benefit from this, then please 🔁 share this post.</em></p>","contentLength":1455,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1jh71qn/understanding_faults_and_fault_tolerance_in/"},{"title":"Ever wanted a “go back” button when debugging JavaScript in Chrome Developer Tools?","url":"https://youtu.be/ft9zQljooL8","date":1742633066,"author":"/u/Physical-Purple-5621","guid":602,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1jh43ng/ever_wanted_a_go_back_button_when_debugging/"}],"tags":["dev","reddit"]}